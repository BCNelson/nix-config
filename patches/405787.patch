From 807a776288483423a7df2194328ee061329edb5f Mon Sep 17 00:00:00 2001
From: Bradley Nelson <bradley@nel.family>
Date: Sat, 5 Jul 2025 10:35:48 -0600
Subject: [PATCH] nixos-generate-config lvm and luks

---
 .../installer/tools/nixos-generate-config.pl  | 147 ++++++++++++++--
 nixos/tests/all-tests.nix                     |   1 +
 .../tests/nixos-generate-config-luks-lvm.nix  | 163 ++++++++++++++++++
 3 files changed, 301 insertions(+), 10 deletions(-)
 create mode 100644 nixos/tests/nixos-generate-config-luks-lvm.nix

diff --git a/nixos/modules/installer/tools/nixos-generate-config.pl b/nixos/modules/installer/tools/nixos-generate-config.pl
index 1799ba2c5d977d..f6a20d2a9f5da9 100644
--- a/nixos/modules/installer/tools/nixos-generate-config.pl
+++ b/nixos/modules/installer/tools/nixos-generate-config.pl
@@ -344,6 +344,22 @@ sub findStableDevPath {
 
     my $st = stat($dev) or return $dev;
 
+    # Special handling for mapper devices (LVM volumes, LUKS devices, etc.)
+    # Convert to UUID-based paths when possible for stability
+    if ($dev =~ m#^/dev/mapper/(.+)$#) {
+        # First try to find a UUID-based path for this device
+        foreach my $uuid_path (glob("/dev/disk/by-uuid/*")) {
+            my $st2 = stat($uuid_path) or next;
+            if ($st->rdev == $st2->rdev) {
+                return $uuid_path;
+            }
+        }
+
+        # If no UUID path is found, preserve the mapper path as fallback
+        # This is critical for both LUKS and LVM devices to work correctly
+        return $dev;
+    }
+
     foreach my $dev2 (glob("/dev/stratis/*/*"), glob("/dev/disk/by-uuid/*"), glob("/dev/mapper/*"), glob("/dev/disk/by-label/*")) {
         my $st2 = stat($dev2) or next;
         return $dev2 if $st->rdev == $st2->rdev;
@@ -415,6 +431,7 @@ sub in {
     $device =~ s/\\040/ /g; # account for devices with spaces in the name (\040 is the escape character)
     $device =~ s/\\011/\t/g; # account for mount points with tabs in the name (\011 is the escape character)
 
+
     # Skip the read-only bind-mount on /nix/store.
     next if $mountPoint eq "/nix/store" && (grep { $_ eq "rw" } @superOptions) && (grep { $_ eq "ro" } @mountOptions);
 
@@ -439,12 +456,45 @@ sub in {
     }
     $fsByDev{$fields[2]} = $mountPoint;
 
+
     # We don't know how to handle FUSE filesystems.
     if ($fsType eq "fuseblk" || $fsType eq "fuse") {
         print STDERR "warning: don't know how to emit ‘fileSystem’ option for FUSE filesystem ‘$mountPoint’\n";
         next;
     }
 
+    # Special handling for LVM volumes to ensure they're detected properly
+    if ($device =~ m#^/dev/mapper/(.+)$#) {
+        my $mapper_name = $1;
+        if (defined $ENV{"DEBUG"}) {
+            print STDERR "Processing mapper device: $mapper_name for mountpoint $mountPoint\n";
+        }
+
+        # Make sure this is actually an LVM volume
+        if ($mapper_name =~ /^([^-]+)-(.+)$/) {
+            my $vg = $1;
+            my $lv = $2;
+            if (defined $ENV{"DEBUG"}) {
+                print STDERR "  Appears to be LVM volume: VG=$vg, LV=$lv\n";
+            }
+
+            # Verify this is really an LVM volume
+            if (-e "/sys/class/block/" . basename(readlink($device))) {
+                my $dmDir = "/sys/class/block/" . basename(readlink($device));
+                if (-e "$dmDir/dm/uuid") {
+                    my $uuid = read_file("$dmDir/dm/uuid", err_mode => 'quiet');
+                    if (defined $uuid && $uuid =~ /^LVM-/) {
+                        if (defined $ENV{"DEBUG"}) {
+                            print STDERR "  Confirmed as LVM volume by UUID\n";
+                        }
+                        # Note: We intentionally don't override stableDevPath here yet
+                        # as findStableDevPath will handle it properly
+                    }
+                }
+            }
+        }
+    }
+
     # Is this a mount of a loopback device?
     my @extraOptions;
     if ($device =~ /\/dev\/loop(\d+)/) {
@@ -547,20 +597,97 @@ sub in {
         my $dmUuid = read_file("/sys/class/block/$deviceName/dm/uuid",  err_mode => 'quiet');
         if ($dmUuid =~ /^CRYPT-LUKS/)
         {
-            my @slaves = glob("/sys/class/block/$deviceName/slaves/*");
-            if (scalar @slaves == 1) {
-                my $slave = "/dev/" . basename($slaves[0]);
-                if (-e $slave) {
-                    my $dmName = read_file("/sys/class/block/$deviceName/dm/name");
-                    chomp $dmName;
-                    # Ensure to add an entry only once
-                    my $luksDevice = "  boot.initrd.luks.devices.\"$dmName\".device";
-                    if ($fileSystems !~ /^\Q$luksDevice\E/m) {
-                        $fileSystems .= "$luksDevice = \"${\(findStableDevPath $slave)}\";\n\n";
+            my $dmName = read_file("/sys/class/block/$deviceName/dm/name");
+            chomp $dmName;
+
+            # Prevent duplicates - check if we already configured this LUKS device
+            my $luksDevice = "  boot.initrd.luks.devices.\"$dmName\"";
+            if ($fileSystems !~ /^\Q$luksDevice\E/m) {
+                my @slaves = glob("/sys/class/block/$deviceName/slaves/*");
+                my $isLvmBased = 0;
+                my $slaveDevice = "";
+
+                # Check if this is LUKS on top of LVM
+                if (scalar @slaves >= 1) {
+                    foreach my $slave (@slaves) {
+                        my $slaveName = basename($slave);
+                        my $slaveDmUuid = read_file("/sys/class/block/$slaveName/dm/uuid", err_mode => 'quiet');
+                        if (defined $slaveDmUuid && $slaveDmUuid =~ /^LVM-/) {
+                            $isLvmBased = 1;
+                            $slaveDevice = "/dev/$slaveName";
+                            last;
+                        }
+                    }
+                }
+
+                # If we have a single non-LVM slave, use the standard approach
+                if (scalar @slaves == 1 && !$isLvmBased) {
+                    my $slave = "/dev/" . basename($slaves[0]);
+                    if (-e $slave) {
+                        $fileSystems .= "$luksDevice.device = \"${\(findStableDevPath $slave)}\";\n";
+                    }
+                }
+                # For LUKS on top of LVM, we need to set preLVM=false
+                elsif ($isLvmBased) {
+                    $fileSystems .= "$luksDevice = {\n";
+                    $fileSystems .= "    device = \"${\(findStableDevPath $slaveDevice || $device)}\";\n";
+                    $fileSystems .= "    preLVM = false;\n";
+                    $fileSystems .= "  };\n\n";
+                }
+                # For any other complex setup, use a generic approach
+                else {
+                    $fileSystems .= "$luksDevice = {\n";
+                    $fileSystems .= "    device = \"${\(findStableDevPath $device)}\";\n";
+                    $fileSystems .= "  };\n\n";
+                }
+            }
+        }
+
+        # Check for LVM-over-LUKS, when the current device is LVM but sits on top of LUKS
+        if (-e "/sys/class/block/$deviceName/dm/uuid") {
+            my $dmUuid = read_file("/sys/class/block/$deviceName/dm/uuid",  err_mode => 'quiet');
+            if (defined $dmUuid && $dmUuid =~ /^LVM-/) {
+                # Add debug information
+                if (defined $ENV{"DEBUG"}) {
+                    print STDERR "Found LVM device: $deviceName, mountPoint: $mountPoint, device: $device\n";
+                }
+
+                # Check if any slave is a LUKS device
+                my @slaves = glob("/sys/class/block/$deviceName/slaves/*");
+                foreach my $slave (@slaves) {
+                    my $slaveName = basename($slave);
+                    if (defined $ENV{"DEBUG"}) {
+                        print STDERR "  Checking slave: $slaveName\n";
+                    }
+
+                    my $slaveDmUuid = read_file("/sys/class/block/$slaveName/dm/uuid", err_mode => 'quiet');
+                    if (defined $slaveDmUuid && $slaveDmUuid =~ /^CRYPT-LUKS/) {
+                        my $dmName = read_file("/sys/class/block/$slaveName/dm/name");
+                        chomp $dmName;
+
+                        if (defined $ENV{"DEBUG"}) {
+                            print STDERR "    Found LUKS device: $dmName\n";
+                        }
+
+                        # Ensure we haven't already added this device
+                        my $luksDevice = "  boot.initrd.luks.devices.\"$dmName\"";
+                        if ($fileSystems !~ /^\Q$luksDevice\E/m) {
+                            my @luks_slaves = glob("/sys/class/block/$slaveName/slaves/*");
+                            if (scalar @luks_slaves == 1) {
+                                my $luks_slave = "/dev/" . basename($luks_slaves[0]);
+                                if (-e $luks_slave) {
+                                    $fileSystems .= "$luksDevice = {\n";
+                                    $fileSystems .= "    device = \"${\(findStableDevPath $luks_slave)}\";\n";
+                                    $fileSystems .= "    preLVM = true;\n";
+                                    $fileSystems .= "  };\n\n";
+                                }
+                            }
+                        }
                     }
                 }
             }
         }
+
         if (-e "/sys/class/block/$deviceName/md/uuid") {
             $useSwraid = 1;
         }
diff --git a/nixos/tests/all-tests.nix b/nixos/tests/all-tests.nix
index 82aef7fdea8a6a..6d115be75d079b 100644
--- a/nixos/tests/all-tests.nix
+++ b/nixos/tests/all-tests.nix
@@ -986,6 +986,7 @@ in
   nix-store-veritysetup = runTest ./nix-store-veritysetup.nix;
   nixops = handleTest ./nixops/default.nix { };
   nixos-generate-config = runTest ./nixos-generate-config.nix;
+  nixos-generate-config-luks-lvm = runTest ./nixos-generate-config-luks-lvm.nix;
   nixos-rebuild-install-bootloader = handleTestOn [
     "x86_64-linux"
   ] ./nixos-rebuild-install-bootloader.nix { withNg = false; };
diff --git a/nixos/tests/nixos-generate-config-luks-lvm.nix b/nixos/tests/nixos-generate-config-luks-lvm.nix
new file mode 100644
index 00000000000000..3a85b7845319a8
--- /dev/null
+++ b/nixos/tests/nixos-generate-config-luks-lvm.nix
@@ -0,0 +1,163 @@
+import ./make-test-python.nix (
+  { lib, pkgs, ... }:
+  {
+    name = "nixos-generate-config-luks-lvm";
+    meta.maintainers = with lib.maintainers; [ ];
+
+    nodes.machine =
+      { pkgs, ... }:
+      {
+        imports = [ ./common/auto-format-root-device.nix ];
+
+        virtualisation = {
+          emptyDiskImages = [
+            1024 # vdb - for LVM-over-LUKS
+            1024 # vdc - for LUKS-over-LVM
+          ];
+          useBootLoader = true;
+          useEFIBoot = true;
+          mountHostNixStore = true;
+        };
+        boot.loader.systemd-boot.enable = true;
+        boot.kernelParams = lib.mkOverride 5 [ "console=tty1" ];
+
+        environment.systemPackages = with pkgs; [
+          cryptsetup
+          lvm2
+        ];
+      };
+
+    testScript = ''
+      # Setup helper functions
+      def setup_lvm_over_luks():
+          """
+          Create an LVM-over-LUKS setup (LUKS → LVM):
+          /dev/vdb → [LUKS encryption] → /dev/mapper/cryptlvm → [LVM PV/VG] →
+                                                               → /dev/mapper/vg0-root
+                                                               → /dev/mapper/vg0-home
+          """
+          machine.succeed("echo -n supersecret | cryptsetup luksFormat -q --iter-time=1 /dev/vdb -")
+          machine.succeed("echo -n supersecret | cryptsetup luksOpen /dev/vdb cryptlvm -")
+
+          # Create LVM structure on the LUKS container
+          machine.succeed("pvcreate /dev/mapper/cryptlvm")
+          machine.succeed("vgcreate vg0 /dev/mapper/cryptlvm")
+          machine.succeed("lvcreate -L 512M -n root vg0")
+          machine.succeed("lvcreate -L 256M -n home vg0")
+
+          # Format the volumes
+          machine.succeed("mkfs.ext4 -L root /dev/mapper/vg0-root")
+          machine.succeed("mkfs.ext4 -L home /dev/mapper/vg0-home")
+
+          # Mount them temporarily
+          machine.succeed("mkdir -p /mnt/{root,home}")
+          machine.succeed("mount /dev/mapper/vg0-root /mnt/root")
+          machine.succeed("mount /dev/mapper/vg0-home /mnt/home")
+
+          # Create some test files to verify later
+          machine.succeed("echo 'LVM-over-LUKS root' > /mnt/root/testfile")
+          machine.succeed("echo 'LVM-over-LUKS home' > /mnt/home/testfile")
+
+      def setup_luks_over_lvm():
+          """
+          Create a LUKS-over-LVM setup (LVM → LUKS):
+          /dev/vdc → [LVM PV/VG] → /dev/mapper/vg1-encrypt → [LUKS encryption] → /dev/mapper/cryptroot
+          """
+          # Create LVM structure directly on the disk
+          machine.succeed("pvcreate /dev/vdc")
+          machine.succeed("vgcreate vg1 /dev/vdc")
+          machine.succeed("lvcreate -L 512M -n encrypt vg1")
+
+          # Add LUKS on top of LVM
+          machine.succeed("echo -n othersecret | cryptsetup luksFormat -q --iter-time=1 /dev/mapper/vg1-encrypt -")
+          machine.succeed("echo -n othersecret | cryptsetup luksOpen /dev/mapper/vg1-encrypt cryptroot -")
+
+          # Format the encrypted volume
+          machine.succeed("mkfs.ext4 -L cryptroot /dev/mapper/cryptroot")
+
+          # Mount it temporarily
+          machine.succeed("mkdir -p /mnt/cryptroot")
+          machine.succeed("mount /dev/mapper/cryptroot /mnt/cryptroot")
+
+          # Create a test file
+          machine.succeed("echo 'LUKS-over-LVM data' > /mnt/cryptroot/testfile")
+
+      # Start machine and wait for it to be ready
+      machine.start()
+      machine.wait_for_unit("multi-user.target")
+
+      # Set up our test disk configurations
+      setup_lvm_over_luks()
+      setup_luks_over_lvm()
+
+      # Run nixos-generate-config to generate the configuration
+      machine.succeed("mkdir -p /etc/nixos-test")
+      machine.succeed("nixos-generate-config --dir /etc/nixos-test")
+
+      # Verify the generated hardware-configuration.nix
+      hardware_config = machine.succeed("cat /etc/nixos-test/hardware-configuration.nix")
+      print("==================== HARDWARE CONFIG START ====================")
+      print(hardware_config)
+      print("==================== HARDWARE CONFIG END ====================")
+
+      # Check for LVM-over-LUKS configuration (LUKS → LVM)
+      # Verify that LUKS device is properly detected and preLVM is true
+      if "boot.initrd.luks.devices.\"cryptlvm\"" not in hardware_config:
+          raise Exception("LVM-over-LUKS setup: LUKS device 'cryptlvm' not found in config")
+
+      if "preLVM = true" not in hardware_config:
+          raise Exception("LVM-over-LUKS setup: LUKS device should have preLVM = true")
+
+      # Check for LUKS-over-LVM configuration (LVM → LUKS)
+      # Verify that LUKS device is properly detected and preLVM is false
+      if "boot.initrd.luks.devices.\"cryptroot\"" not in hardware_config:
+          raise Exception("LUKS-over-LVM setup: LUKS device 'cryptroot' not found in config")
+
+      if "preLVM = false" not in hardware_config:
+          raise Exception("LUKS-over-LVM setup: LUKS device should have preLVM = false")
+
+      # Make sure the filesystem entries were properly generated for both setups
+      # First check that all required mountpoints are present
+      mountpoints = [
+          "fileSystems.\"/mnt/root\"",
+          "fileSystems.\"/mnt/home\"",
+          "fileSystems.\"/mnt/cryptroot\""
+      ]
+
+      for mountpoint in mountpoints:
+          if mountpoint not in hardware_config:
+              raise Exception(f"Filesystem mount {mountpoint} not found in config")
+
+      # Now get the UUIDs of all our created devices to make sure they're used in the config
+      root_uuid = machine.succeed("blkid -s UUID -o value /dev/mapper/vg0-root").strip()
+      home_uuid = machine.succeed("blkid -s UUID -o value /dev/mapper/vg0-home").strip()
+      cryptroot_uuid = machine.succeed("blkid -s UUID -o value /dev/mapper/cryptroot").strip()
+
+      # Check that these UUIDs appear in the hardware config, either as /dev/disk/by-uuid/UUID or as "UUID=UUID"
+      for uuid in [root_uuid, home_uuid, cryptroot_uuid]:
+          if f"/dev/disk/by-uuid/{uuid}" not in hardware_config and f"UUID={uuid}" not in hardware_config:
+              raise Exception(f"UUID {uuid} not found in configuration - stable device paths are not being used properly")
+
+      # Verify the mounts work by checking the content of the test files
+      machine.succeed("mkdir -p /mnt/test/root /mnt/test/home /mnt/test/cryptroot")
+      machine.succeed("mount /dev/mapper/vg0-root /mnt/test/root")
+      machine.succeed("mount /dev/mapper/vg0-home /mnt/test/home")
+      machine.succeed("mount /dev/mapper/cryptroot /mnt/test/cryptroot")
+
+      root_content = machine.succeed("cat /mnt/test/root/testfile").strip()
+      home_content = machine.succeed("cat /mnt/test/home/testfile").strip()
+      cryptroot_content = machine.succeed("cat /mnt/test/cryptroot/testfile").strip()
+
+      if root_content != "LVM-over-LUKS root":
+          raise Exception(f"Wrong content in root testfile: {root_content}")
+
+      if home_content != "LVM-over-LUKS home":
+          raise Exception(f"Wrong content in home testfile: {home_content}")
+
+      if cryptroot_content != "LUKS-over-LVM data":
+          raise Exception(f"Wrong content in cryptroot testfile: {cryptroot_content}")
+
+      print("All tests passed!")
+    '';
+  }
+)
